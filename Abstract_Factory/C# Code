Scenario:

Imagine you're building a game where players can choose between two types of characters: "Warriors" and "Mages". 
Each type has its own set of weapons and armor. 
The abstract factory pattern helps you create these character types and their corresponding equipment seamlessly.

----------------------------------------------------------------------------------------------------------------------------
1. Define Abstract Factory Interface

We define an ICharacterFactory interface that has methods for creating weapons and armor.

public interface ICharacterFactory
{
    IWeapon CreateWeapon();
    IArmor CreateArmor();
}

----------------------------------------------------------------------------------------------------------------------------
2. Create Concrete Factories

We create concrete factories (WarriorFactory and MageFactory) that implement the ICharacterFactory interface. 
Each factory creates weapons and armor specific to the character type.

public class WarriorFactory : ICharacterFactory
{
    public IWeapon CreateWeapon()
    {
        return new Sword();
    }

public IArmor CreateArmor()
    {
        return new PlateArmor();
    }
}

public class MageFactory : ICharacterFactory
{
    public IWeapon CreateWeapon()
    {
        return new Staff();
    }
    public IArmor CreateArmor()
    {
        return new Robe();
    }
}

----------------------------------------------------------------------------------------------------------------------------
3. Define Abstract Product Interfaces

We define IWeapon and IArmor interfaces for the products.

public interface IWeapon
{
    string Attack();
}

public interface IArmor
{
    string Defend();
}

----------------------------------------------------------------------------------------------------------------------------
4. Create Concrete Products

We create concrete classes (Sword, Staff, PlateArmor, and Robe) that implement the IWeapon and IArmor interfaces.

public class Sword : IWeapon
{
    public string Attack()
    {
        return "Slash with sword!";
    }
}

public class Staff : IWeapon
{
    public string Attack()
    {
        return "Cast spell with staff!";
    }
}

public class PlateArmor : IArmor
{
    public string Defend()
    {
        return "Block with plate armor!";
    }
}

public class Robe : IArmor
{
    public string Defend()
    {
        return "Dodge with robe!";
    }
}

----------------------------------------------------------------------------------------------------------------------------
5. Use Abstract Factory to Create Characters

We use the abstract factory to create characters. 
The Character class takes an ICharacterFactory as a parameter in its constructor. 
It creates weapons and armor based on the factory and provides methods to perform actions.

public class Character
{
    private IWeapon weapon;
    private IArmor armor;

public Character(ICharacterFactory factory)
    {
        weapon = factory.CreateWeapon();
        armor = factory.CreateArmor();
    }

public void Attack()
    {
        Console.WriteLine(weapon.Attack());
    }

public void Defend()
    {
        Console.WriteLine(armor.Defend());
    }
}

----------------------------------------------------------------------------------------------------------------------------
6. Using the Abstract Factory

In the Main method, we create characters of both types using their respective factories and demonstrate their attacks 
and defense capabilities.

class Program
{
    static void Main()
    {
        ICharacterFactory warriorFactory = new WarriorFactory();
        Character warrior = new Character(warriorFactory);
        warrior.Attack();
        warrior.Defend();

        ICharacterFactory mageFactory = new MageFactory();
        Character mage = new Character(mageFactory);
        mage.Attack();
        mage.Defend();
    }
}

----------------------------------------------------------------------------------------------------------------------------
OUTPUT

Slash with sword!
Block with plate armor!
Cast spell with staff!
Dodge with robe!

----------------------------------------------------------------------------------------------------------------------------
