Scenario: Pizza Restaurant's Custom Pizzas

Imagine you own a pizza restaurant that prides itself on offering custom-made pizzas with a variety of toppings. 
Customers can create their own pizzas by selecting dough, sauce, and toppings. 
To efficiently build these custom pizzas, you decide to use the builder pattern.

----------------------------------------------------------------------------------------------------------------------------
1. Define the Interfaces

We define the IPizza interface with methods to add toppings and get pizza information.

using System;
using System.Collections.Generic;
public interface IPizza
{
    void AddTopping(string topping);
    string GetPizzaInfo();
}

----------------------------------------------------------------------------------------------------------------------------
2. Create Concrete Class

We create a Pizza class that implements the IPizza interface. 
It has a list of toppings and methods to add toppings and get pizza information.

public class Pizza : IPizza
{
    private List<string> toppings = new List<string>();
    public void AddTopping(string topping)
    {
        toppings.Add(topping);
    }
   
public string GetPizzaInfo()
    {
        string toppingsList = string.Join(", ", toppings);
        return $"Pizza with {toppingsList} toppings.";
    }
}

----------------------------------------------------------------------------------------------------------------------------
3. Create Builder Interfaces

We define the IPizzaBuilder interface with methods to build different parts of the pizza and to get the constructed pizza.

public interface IPizzaBuilder
{
    void BuildDough();
    void BuildSauce();
    void BuildToppings();
    IPizza GetPizza();
}

----------------------------------------------------------------------------------------------------------------------------
4. Create Concrete Builder Classes

We create concrete builder classes: MargheritaPizzaBuilder and VeggieSupremePizzaBuilder, each implementing the 
IPizzaBuilder interface. These builders specialize in constructing different types of pizzas.

public class MargheritaPizzaBuilder : IPizzaBuilder
{
    private IPizza pizza = new Pizza();

    public void BuildDough()
    {
        pizza.AddTopping("thin crust dough");
    }

    public void BuildSauce()
    {
        pizza.AddTopping("tomato sauce");
    }

    public void BuildToppings()
    {
        pizza.AddTopping("mozzarella cheese");
    }

    public IPizza GetPizza()
    {
        return pizza;
    }
}

public class VeggieSupremePizzaBuilder : IPizzaBuilder
{
    private IPizza pizza = new Pizza();

    public void BuildDough()
    {
        pizza.AddTopping("thick crust dough");
    }

    public void BuildSauce()
    {
        pizza.AddTopping("spicy sauce");
    }
    public void BuildToppings()
    {
        pizza.AddTopping("bell peppers, onions, olives");
    }
    public IPizza GetPizza()
    {
        return pizza;
    }
}

----------------------------------------------------------------------------------------------------------------------------
5. Create Director

We create a PizzaCook class (director) that has a method MakePizza which takes a builder, executes the building steps, and
returns the constructed pizza.

public class PizzaCook
{
    public IPizza MakePizza(IPizzaBuilder builder)
    {
        builder.BuildDough();
        builder.BuildSauce();
        builder.BuildToppings();
        return builder.GetPizza();
    }
}

----------------------------------------------------------------------------------------------------------------------------
6. Using the Builder Pattern

In the Main method, we create PizzaCook instance and use different builders to create Margherita and Veggie Supreme pizzas. 
We display the information about the constructed pizzas.

class Program
{
    static void Main()
    {
        PizzaCook cook = new PizzaCook();

        IPizzaBuilder margheritaBuilder = new MargheritaPizzaBuilder();
        IPizza margheritaPizza = cook.MakePizza(margheritaBuilder);
        Console.WriteLine("Margherita Pizza:");
        Console.WriteLine(margheritaPizza.GetPizzaInfo());

        IPizzaBuilder veggieBuilder = new VeggieSupremePizzaBuilder();
        IPizza veggiePizza = cook.MakePizza(veggieBuilder);
        Console.WriteLine("\nVeggie Supreme Pizza:");
        Console.WriteLine(veggiePizza.GetPizzaInfo());
    }
}

----------------------------------------------------------------------------------------------------------------------------
OUTPUT

Margherita Pizza:
Pizza with thin crust dough, tomato sauce, mozzarella cheese toppings.

Veggie Supreme Pizza:
Pizza with thick crust dough, spicy sauce, bell peppers, onions, olives toppings.

----------------------------------------------------------------------------------------------------------------------------
