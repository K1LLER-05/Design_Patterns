Scenario: Food Ordering

Imagine you're building a program for a food delivery app. You want to implement the Factory Design Pattern to create different types of food items â€“ pizza and burger.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Define the Food Interface:

Start by creating an interface that all food items will implement. This interface will ensure that every food item has a way to describe itself.

interface IFood
{
    string Describe();
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Create Food Classes:

Next, create classes for each type of food (Pizza and Burger), and have them implement the IFood interface.

class Pizza : IFood
{
    public string Describe()
    {
        return "Delicious pizza!";
    }
}

class Burger : IFood
{
    public string Describe()
    {
        return "Tasty burger!";
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Create the Food Factory:

Now, create the "factory" that will create different types of food items.

class FoodFactory
{
    public IFood CreateFood(string type)
    {
        if (type == "Pizza")
        {
            return new Pizza();
        }
        else if (type == "Burger")
        {
            return new Burger();
        }
        else
        {
            throw new ArgumentException("Invalid food type");
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Using the Factory:

Finally, let's use our food factory to create food items without worrying about how they're created.

class Program
{
    static void Main(string[] args)
    {
        FoodFactory factory = new FoodFactory();

        IFood pizza = factory.CreateFood("Pizza");
        IFood burger = factory.CreateFood("Burger");

        Console.WriteLine(pizza.Describe());  // Output: Delicious pizza!
        Console.WriteLine(burger.Describe()); // Output: Tasty burger!
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
In this example, the Factory Design Pattern helps you create different types of food items using the FoodFactory. Just like the previous example, you don't need to know the details of how each food item is created. You simply ask the factory to give you the right food item, and it handles the creation process.

This pattern makes it easy to add new types of food items (like salads or sandwiches) in the future without changing the code that uses the factory. It's like adding new recipes to a menu without altering the restaurant's kitchen setup.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
